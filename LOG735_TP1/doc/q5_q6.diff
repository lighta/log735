diff -ur ../src/main/java/ens/etsmtl/ca/q5/Client.java ../src/main/java/ens/etsmtl/ca/q6/Client.java
--- ../src/main/java/ens/etsmtl/ca/q5/Client.java	2015-05-16 10:21:02.000000000 -0400
+++ ../src/main/java/ens/etsmtl/ca/q6/Client.java	2015-05-16 10:21:37.000000000 -0400
@@ -15,7 +15,8 @@
 Client avance, switchant de serveur apres un certain Timeout
 ******************************************************/
 
-package ens.etsmtl.ca.q5;
+package ens.etsmtl.ca.q6;
+
 import java.io.*;
 import java.net.*;
 import java.util.concurrent.Callable;
@@ -26,7 +27,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import ens.etsmtl.ca.q5.ServDico.ServerDef;
+import ens.etsmtl.ca.q6.ServDico.ServerDef;
 
 
 
diff -ur ../src/main/java/ens/etsmtl/ca/q5/ServDico.java ../src/main/java/ens/etsmtl/ca/q6/ServDico.java
--- ../src/main/java/ens/etsmtl/ca/q5/ServDico.java	2015-05-16 10:18:27.000000000 -0400
+++ ../src/main/java/ens/etsmtl/ca/q6/ServDico.java	2015-05-16 10:21:47.000000000 -0400
@@ -15,7 +15,8 @@
 Class servant a definir un dictionnaire de serveur joignable
 ******************************************************/
 
-package ens.etsmtl.ca.q5;
+package ens.etsmtl.ca.q6;
+
 import java.util.HashMap;
 import java.util.Map;
 
diff -ur ../src/main/java/ens/etsmtl/ca/q5/Server.java ../src/main/java/ens/etsmtl/ca/q6/Server.java
--- ../src/main/java/ens/etsmtl/ca/q5/Server.java	2015-05-16 10:20:26.000000000 -0400
+++ ../src/main/java/ens/etsmtl/ca/q6/Server.java	2015-05-16 10:25:47.140828297 -0400
@@ -12,19 +12,25 @@
  Date cr√©ation : 7/05/2015
  Date dern. modif. : 16/05/2015
 ******************************************************
-Server echo Multithread TCP 
+Server avance echo Multithread TCP 
 ******************************************************/
 
-package ens.etsmtl.ca.q5;
+package ens.etsmtl.ca.q6;
+
 import java.net.*;
 import java.io.*;
 
+import ens.etsmtl.ca.q6.ServDico;
+import ens.etsmtl.ca.q6.ServDico.ServerDef;
+
 /**
  * Objet server general servant a definir la creation d'un serveur TCP specific
  * @author lighta
  */
 public class Server {
-	static int nb_req=0;	//variable pour compter le nombre de requete servit
+	ServDico servs_dico;					//dictionnaire des autres serveur possiblement actif
+	static int nb_req=0;					//variable pour compter le nombre de requete servit
+	static final int TIMEOUT_CONNECT=1000;	//timeout de connection pour joindre les autres serveur
 
 	/**
 	 * Constructor
@@ -36,6 +42,8 @@
 		int second=5; //time to sleep before serving client (for simulate issue)
 		String hostname;
 		String inputLine = "";
+	
+		servs_dico = new ServDico();
 		
 		BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
 		System.out.println("Entrez l'ip de bind du serveur");
@@ -192,7 +200,36 @@
 			this.second = second;
 			this.serv_port = serv_port;
 			this.serv_host = "";
-		}	
+		}
+
+		/**
+		 * Fonction de synchronisation 
+		 *informe les autres serveur de la nouvelle valeur de nb_req
+		 */
+		public void SyncServer() {
+			final int list_size = servs_dico.servers_dico.size();
+			ServerDef cur_serv;
+			Socket tmp_Socket;
+			PrintWriter out;
+			
+			int i;
+			for(i=0; i<list_size; i++ ){
+				cur_serv = servs_dico.servers_dico.get(i);
+				
+				if(cur_serv.port==this.serv_port && cur_serv.host_name.equals(serv_host)){
+					continue; //skip ourself
+				}
+				tmp_Socket = new Socket();
+				try {
+					tmp_Socket.connect(new InetSocketAddress(cur_serv.host_name,cur_serv.port), TIMEOUT_CONNECT);
+					out = new PrintWriter(tmp_Socket.getOutputStream(), true);
+					out.println("SYNC:"+nb_req);
+				} catch (IOException e) {
+					System.err.println("Couldn't sync with "+cur_serv.toString());
+					continue;
+				}
+			}
+		}
 		
 		/**
 		 * Fonction de reponse, traitement propre sans notions des containers
@@ -221,8 +258,14 @@
 					System.out.println("Serveur: Connection client closed" );
 					break;
 				}
-
+				else if (inputLine.contains("SYNC")){
+					System.out.println("Syncing serv");
+					String parse[] = inputLine.split(":");
+					nb_req=Integer.parseInt(parse[1]);
+					break; //no reply
+				}
 				nb_req++;
+				SyncServer();
 				inputLine = "nb_req:"+nb_req+" "+inputLine.toUpperCase();
 				//echo standard
 				System.out.println("Serveur: " + inputLine);
@@ -315,4 +358,4 @@
 		new Server();
 		
 	}
-}
+}
\ No newline at end of file
