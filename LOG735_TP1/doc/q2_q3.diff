diff -ur ../src/main/java/ens/etsmtl/ca/q2/Client.java ../src/main/java/ens/etsmtl/ca/q3/Client.java
--- ../src/main/java/ens/etsmtl/ca/q2/Client.java	2015-05-16 09:32:41.351545226 -0400
+++ ../src/main/java/ens/etsmtl/ca/q3/Client.java	2015-05-16 10:13:12.645946229 -0400
@@ -1,70 +1,267 @@
-/******************************************************
- Cours : LOG735
- Session : Été 2015
- Groupe : 01
- Projet : Laboratoire 1
- Étudiants : 
- 	Max Moreau
- 	Charly Simon
- Code(s) perm. : 
-	MORM30038905
- 	SIMC28069108
- Date création : 7/05/2015
- Date dern. modif. : 16/05/2015
-******************************************************
-Simple client TCP se connectant a un serveur quelquonque.
-******************************************************/
-
-package ens.etsmtl.ca.q2;
-import java.io.*;
-import java.net.*;
-
-public class Client {
-	public static void main(String[] args) throws IOException {
-
-		String serverHostname = new String("127.0.0.1");
-
-		if (args.length > 0)
-			serverHostname = args[0];
-		System.out.println("Essai de se connecter a l'hote " + serverHostname
-				+ " au port 10118.");
-
-		Socket echoSocket = null;
-		PrintWriter out = null;
-		BufferedReader in = null;
-
-		try {
-			echoSocket = new Socket(serverHostname, 10118);
-			out = new PrintWriter(echoSocket.getOutputStream(), true);
-			in = new BufferedReader(new InputStreamReader(
-					echoSocket.getInputStream()));
-		} catch (UnknownHostException e) {
-			System.err.println("Hote inconnu: " + serverHostname);
-			System.exit(1);
-		} catch (IOException e) {
-			System.err.println("Ne pas se connecter au serveur: "
-					+ serverHostname);
-			System.exit(1);
-		}
-
-		BufferedReader stdIn = new BufferedReader(new InputStreamReader(
-				System.in));
-		String userInput;
-		System.out.print("Entree: ");
-		while ((userInput = stdIn.readLine()) != null) {
-			out.println(userInput);
-			String echo = in.readLine();
-			System.out.println("echo: " + echo);
-			if (echo.contains("BYE")) {
-				break;
-			}
-
-			System.out.print("Entree: ");
-		}
-
-		out.close();
-		in.close();
-		stdIn.close();
-		echoSocket.close();
-	}
-}
+/******************************************************
+ Cours : LOG735
+ Session : Été 2015
+ Groupe : 01
+ Projet : Laboratoire 1
+ Étudiants : 
+ 	Max Moreau
+ 	Charly Simon
+ Code(s) perm. : 
+	MORM30038905
+ 	SIMC28069108
+ Date création : 7/05/2015
+ Date dern. modif. : 16/05/2015
+******************************************************
+Client avance, switchant de serveur apres un certain Timeout
+******************************************************/
+
+package ens.etsmtl.ca.q3;
+import java.io.*;
+import java.net.*;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+import ens.etsmtl.ca.q3.ServDico.ServerDef;
+
+
+
+public class Client {
+	private Socket echoSocket = null;			//Socket de connection au serveur
+	private PrintWriter out = null;				//Writter pour l'envoi au serveur
+	private BufferedReader in;					//BufferStream pour les entree provenant du serveur
+	private int current = -1;					//index d'iteration des serveurs
+	private ServDico servs_dico;				//dictionnaire definissant l'ensemble des serveurs
+	
+	//enumeration des etats possible d'une reponse
+	private enum state_echo {
+		END,  		//fin de connection par server
+		NEXT, 		//prochaine demande du client
+		TIMEOUT; 	//timeout atteint, faire strat
+	};
+	
+	final int TIMEOUT_REPONSE = 3*1000; 		// tmp de timeout pour la reponse du serveur
+	final int TIMEOUT_CONNECT = 3000; 			// tmp de timeout pour connection au serveur
+	private ScheduledExecutorService executor;	//scheduler pour les fonction temporiser
+
+	/**
+	 * Fonction servant a itere dans la liste des Serveur definit.
+	 * Retourne une definition de serveur offrant le service
+	 * @return
+	 */
+	private ServerDef getNext_host() {
+		current++;
+		if (current >= servs_dico.servers_dico.size() ) {
+			System.err.println("Plus de serveur disponible pour switch");
+			System.exit(1);
+		}
+		return servs_dico.servers_dico.get(current);
+	}
+
+	/**
+	 * Fonction d'initialisation du socket et autre stream lie lors d'une connection
+	 * @param hostname : Adr du serveur a se connecter
+	 * @param port : Port du serveur a se connecter
+	 * @param switch_host : Quitter la connection active ?
+	 * @return true=sucess, false=erreur survenue
+	 */
+	private boolean init_sock(String hostname, Integer port, boolean switch_host) {
+		if(switch_host){
+			if (echoSocket != null){
+				try {
+					echoSocket.close();
+				} catch (IOException e) {
+					System.err.println("Couldn't close socket");
+				}
+			}	
+		}
+		echoSocket = attempt_to_connect(hostname, port);
+		if (echoSocket == null) {
+			System.out.println("Aucun serveur dispo");
+			return false;
+		//	System.exit(2);
+		}
+		try {
+			out = new PrintWriter(echoSocket.getOutputStream(), true);
+		} catch (IOException e) {
+			System.err.println("Couldn't attach to outSocket");
+			return false;
+		//	e.printStackTrace();
+		}
+		try {
+			in = new BufferedReader(new InputStreamReader(echoSocket.getInputStream()));
+		} catch (IOException e) {
+			System.err.println("Couldn't attach to outSocket");
+			return false;
+		//	e.printStackTrace();
+		}
+		
+		return true;
+	}
+	
+	/**
+	 * Fonction iterative essayant de se connecter a un serveur (offrant le service).
+	 * Utilisera l'hostname et port fournit en parametre comme essai de base 
+	 * puis iterera sur la liste du dictionnaire.
+	 * @param hostname : Adr d'un serveur
+	 * @param port : Port d'un serveur
+	 * @return Une connection active a un serveur ou exit du prog
+	 */
+	private Socket attempt_to_connect(String hostname, Integer port) {
+		Socket tmp_Socket = null;
+		String serverHostname = "";
+		int server_port = 10118;
+		ServerDef hostserv;
+		
+		System.out.println("current="+current);
+		if (hostname != null) {
+			serverHostname = hostname;
+			if (port != null) { //on ne prend pas le port si on a pas de hostname associer
+				server_port = port;
+			}
+		} else {
+			hostserv = getNext_host();
+			serverHostname = hostserv.host_name;
+			server_port = hostserv.port;
+		}
+		
+		while (true) {
+			if(echoSocket != null){ //check if already used
+				if(echoSocket.getInetAddress().getHostAddress().compareToIgnoreCase(serverHostname)==0){
+					System.out.println("Same host");
+					if(echoSocket.getPort() == server_port){
+						System.out.println("And same port, skipping...");
+						//getting next (is skipping)
+						hostserv = getNext_host();
+						serverHostname = hostserv.host_name;
+						server_port = hostserv.port;
+					}
+				}
+			}
+			try {
+				System.out.println("Essai de se connecter a l'hote "+ serverHostname + " au port " + server_port);
+				tmp_Socket = new Socket();
+				tmp_Socket.connect(new InetSocketAddress(serverHostname,server_port), TIMEOUT_CONNECT);
+				break; //on a trouver un serveur valide, on sort
+			} catch (UnknownHostException e) {
+				System.err.println("Hote inconnu: " + serverHostname);
+			} catch (IOException e) {
+				System.err.println("Ne peut pas se connecter au serveur: "+ serverHostname);
+			}
+			hostserv = getNext_host();
+			serverHostname = hostserv.host_name;
+			server_port = hostserv.port;
+		}
+
+		return tmp_Socket;
+	}
+
+	/**
+	 * Fonction temporiser attendant le retour d'une requete.
+	 * Sert a lancer un timeout pour effectuer une strategy 
+	 * si le timeout est atteint avant la reponse
+	 * @param in : Stream d'entree pour la reponse
+	 * @return un etat de retour, cf state_echo
+	 * @throws IOException
+	 */
+	private state_echo launch(BufferedReader in) throws IOException {	
+		final BufferedReader tmp_in = in;
+		final Future<state_echo> handler = executor.submit(new Callable<state_echo>() {
+		    @Override
+		    public state_echo call() throws Exception {
+		    	String echo = tmp_in.readLine();
+		    	state_echo res;
+				System.out.println("echo: " + echo);
+				if (echo.contains("BYE")) {
+					res = state_echo.END;
+				}
+				else {
+					res = state_echo.NEXT;
+				}
+				executor.shutdownNow();
+				return res;
+		    }
+		});
+		try {
+			executor.schedule(new Runnable(){
+			    @Override
+			    public void run(){
+			    	System.out.println("Canceling job");
+			        handler.cancel(true);
+			        System.out.println("Cancel done");
+			        executor.shutdown();
+			        //state_echo.TIMEOUT;
+			    }      
+			}, TIMEOUT_REPONSE, TimeUnit.MILLISECONDS);
+		}
+		catch (RejectedExecutionException rj){
+			if(handler.isDone() == false ){
+				System.out.println("Error with scheduling timeout");
+			}	
+		}
+
+		while(!handler.isDone()); // on attend
+		
+		if(handler.isCancelled()) {
+			return state_echo.TIMEOUT;
+		}
+		try {
+			return handler.get();
+		} catch (InterruptedException e) {
+			return state_echo.TIMEOUT;
+		} catch (ExecutionException e) {
+			System.err.println("Erreur quelque part dans le thread.. veuillez recommencez !!");
+			return state_echo.NEXT; //on reeesaye une nouvelle entree de client
+		}
+	}
+	
+	/**
+	 * Constructeur
+	 * @throws IOException
+	 */
+	public Client() throws IOException {
+		servs_dico = new ServDico();
+
+		BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
+		System.out.println("Entrez l'ip du serveur");
+		String serverHostname = stdIn.readLine();
+
+		if(init_sock(serverHostname, null,false)==false)
+			System.exit(2);
+		
+		String userInput="";
+		boolean getinput = true;
+
+		while (true) {
+			if(getinput==true){
+				System.out.print("Entree: ");
+				userInput = stdIn.readLine();
+			}
+			getinput=true;
+			out.println(userInput); 
+			executor = Executors.newScheduledThreadPool(2);
+			final state_echo res = launch(in);
+			if(res == state_echo.END) break;
+			else if(res == state_echo.TIMEOUT){
+				System.out.println("Timeout reached, need to switch host");
+				if(init_sock(null,null,true)==false)
+					System.exit(2);
+				getinput=false;
+				//ok mais est-ce qu'on refait cette p** de requete ??
+			}
+		}
+		stdIn.close();
+		
+		out.close();
+		in.close();
+		echoSocket.close();
+	}
+
+	public static void main(String[] args) throws IOException {
+		new Client();
+	}
+}
Only in ../src/main/java/ens/etsmtl/ca/q3: ServDico.java
diff -ur ../src/main/java/ens/etsmtl/ca/q2/Server.java ../src/main/java/ens/etsmtl/ca/q3/Server.java
--- ../src/main/java/ens/etsmtl/ca/q2/Server.java	2015-05-16 09:53:18.431225286 -0400
+++ ../src/main/java/ens/etsmtl/ca/q3/Server.java	2015-05-16 09:55:58.000000000 -0400
@@ -1,315 +1,315 @@
-/******************************************************
- Cours : LOG735
- Session : Été 2015
- Groupe : 01
- Projet : Laboratoire 1
- Étudiants : 
- 	Max Moreau
- 	Charly Simon
- Code(s) perm. : 
-	MORM30038905
- 	SIMC28069108
- Date création : 7/05/2015
- Date dern. modif. : 16/05/2015
-******************************************************
-Server echo Multithread TCP 
-******************************************************/
+/******************************************************
+ Cours : LOG735
+ Session : Été 2015
+ Groupe : 01
+ Projet : Laboratoire 1
+ Étudiants : 
+ 	Max Moreau
+ 	Charly Simon
+ Code(s) perm. : 
+	MORM30038905
+ 	SIMC28069108
+ Date création : 7/05/2015
+ Date dern. modif. : 16/05/2015
+******************************************************
+Server echo Multithread TCP 
+******************************************************/
+
+package ens.etsmtl.ca.q3;
+import java.net.*;
+import java.io.*;
+
+/**
+ * Objet server general servant a definir la creation d'un serveur TCP specific
+ * @author lighta
+ */
+public class Server {
+
+	/**
+	 * Constructor
+	 * Demandea l'usager un ensemble d'information pour la creation du serveur
+	 * @throws IOException
+	 */
+	public Server() throws IOException {
+		super();
+		int second=5; //time to sleep before serving client (for simulate issue)
+		String hostname;
+		String inputLine = "";
+		
+		BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
+		System.out.println("Entrez l'ip de bind du serveur");
+		hostname = stdIn.readLine();
+		//check ip
+		
+		
+		System.out.println("Entrez le nb de second");
+		inputLine = stdIn.readLine();
+		second = Integer.parseInt(inputLine);
+		
+		ServerTCP serv_th = new ServerTCP(hostname,second);
+		serv_th.start();
+		
+		while (inputLine.equalsIgnoreCase("Q")==false ) {
+			System.out.println("Press Q to end server");
+			inputLine = stdIn.readLine();
+		} //waiting request stop
+		System.out.println("Closing server");
+		serv_th.stoping();
+		while(serv_th.isAlive()); //waiting gracefully closed
+		System.out.println("Server closed");
+	}
+
+
+	/**
+	 * Serveur Echo Multithread
+	 * Ecoute et repond au connexion des clients
+	 * @author lighta
+	 */
+	public class ServerTCP extends Thread {
+		boolean run = true; 						//start/stop server variable
+		Socket clientSocket = null;					//socket des clients
+		HandlerTCP clientjob;						//thread des client
+		
+		ServerSocket serverSocket = null;			//endpoint du servuer
+		InetAddress ipAddress;						//adr d'ecoute du serveur
+		
+		String hostname;							//adr d'ecoute du serveur (forme string)
+		static final String DEF_HOST="127.0.0.1";   //adr d'ecoute par defaut
+		
+		int port=10118;								//port d'ecoute
+		int nbsleep=0;								//tps d'attente
+		
+		/**
+		 * Constructeur
+		 * Cree un serveur en ecoute a l'adresse hostname avec un temps d'attente nbsleep
+		 * @param hostname : Adresse ou le serveur doit ecouter
+		 * @param nbsleep : Temps d'attente en second
+		 */
+		public ServerTCP(String hostname, int nbsleep) {
+			this.hostname=hostname;
+			this.nbsleep=nbsleep;	
+			try {
+				ipAddress= InetAddress.getByName(hostname);
+			} catch (UnknownHostException e1) {
+				System.err.println("On ne peut pas se binder sur : "+hostname+ " invalide");
+				System.exit(1);
+			}
+			try {
+				serverSocket = new ServerSocket(port,0, ipAddress);
+			} catch (IOException e) {
+				System.err.println("On ne peut pas ecouter au  port: "+port);
+				System.exit(1);
+			}
+		}
+		
+		/**
+		 * Constructeur
+		 * Cree un serveur en ecoute a l'adresse hostname sans temps d'attente
+		 * @param hostname : Adresse ou le serveur doit ecouter
+		 */
+		public ServerTCP(String hostname)  {
+			this(hostname,0);
+		}
+
+		/**
+		 * Constructeur
+		 * Cree un serveur en ecoute a l'adresse DEF_HOST et sans temps d'attente
+		 */
+		public ServerTCP()  {
+			this(DEF_HOST,0);
+		}
+		
+		
+		/**
+		 * Methode servant a rendre le serveur en mode actif
+		 * Ecoute infiniment en attente d'une connection puis transmet a HandlerTCP
+		 */
+		@Override
+		public void run() {
+				System.out.println("Le serveur est en marche, Attente de la connexion...");
+				while (run == true) {
+					try {
+						clientSocket = serverSocket.accept();
+					} catch (IOException e) {
+						System.err.println("Accept a echoue.");
+						continue;
+					}
+					
+					
+					try {
+						clientjob = new HandlerTCP(clientSocket,nbsleep,port,hostname);
+						clientjob.start();
+					} catch (IOException e) {
+						// TODO Auto-generated catch block
+						e.printStackTrace();
+					}
+					if(Thread.interrupted())
+						run = false;
+				}
+		}
+		
+		/**
+		 * Fonction pour arreter l'ecoute infinie du serveur.
+		 * Marque la fin de la boucle 
+		 * puis force une exeption pour quitter les IO blocants.
+		 */
+		public void stoping() {
+			run = false;
+			try {
+			//	clientjob.stoping();
+				serverSocket.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+		}
+	}
+	//end ServerTCP class
+	
+	/**
+	 * Class de traitement du serveur pour chaque connection client
+	 * (Ici un simple wait + echo)
+	 * @author lighta
+	 */
+	public class HandlerTCP extends Thread {
+		Socket clientSocket = null;			//socket de connection au client
+		int second=0;						//nb de seconded'attente avant reponse
+		int serv_port=0;					//port du serveur
+		String serv_host;					//adr du serveur
+
+		/**
+		 * Constructeur
+		 * Creer un objet de reponse pour le serveur qui sera envoyer au client du socket
+		 * @param clientSocket : Socket du client (pour repondre)
+		 * @param second : Temps d'attente avant reponse
+		 * @param serv_port : Port du serveur lie
+		 * @param serv_host : Adresse du serveur lie
+		 * @throws IOException
+		 */
+		public HandlerTCP(Socket clientSocket, int second, int serv_port, String serv_host) throws IOException {
+			this.clientSocket = clientSocket;
+			this.second = second;
+			this.serv_port = serv_port;
+			this.serv_host = "";
+		}	
+		
+		/**
+		 * Fonction de reponse, traitement propre sans notions des containers
+		 * @throws IOException
+		 * @throws InterruptedException
+		 */
+		private void reply() throws IOException, InterruptedException {
+			PrintWriter out;
+			out = new PrintWriter(clientSocket.getOutputStream(), true);
+			BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
 
-package ens.etsmtl.ca.q2;
-import java.net.*;
-import java.io.*;
-
-/**
- * Objet server general servant a definir la creation d'un serveur TCP specific
- * @author lighta
- */
-public class Server {
-
-	/**
-	 * Constructor
-	 * Demandea l'usager un ensemble d'information pour la creation du serveur
-	 * @throws IOException
-	 */
-	public Server() throws IOException {
-		super();
-		int second=5; //time to sleep before serving client (for simulate issue)
-		String hostname;
-		String inputLine = "";
-		
-		BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
-		System.out.println("Entrez l'ip de bind du serveur");
-		hostname = stdIn.readLine();
-		//check ip
-		
-		
-		System.out.println("Entrez le nb de second");
-		inputLine = stdIn.readLine();
-		second = Integer.parseInt(inputLine);
-		
-		ServerTCP serv_th = new ServerTCP(hostname,second);
-		serv_th.start();
-		
-		while (inputLine.equalsIgnoreCase("Q")==false ) {
-			System.out.println("Press Q to end server");
-			inputLine = stdIn.readLine();
-		} //waiting request stop
-		System.out.println("Closing server");
-		serv_th.stoping();
-		while(serv_th.isAlive()); //waiting gracefully closed
-		System.out.println("Server closed");
-	}
-
-
-	/**
-	 * Serveur Echo Multithread
-	 * Ecoute et repond au connexion des clients
-	 * @author lighta
-	 */
-	public class ServerTCP extends Thread {
-		boolean run = true; 						//start/stop server variable
-		Socket clientSocket = null;					//socket des clients
-		HandlerTCP clientjob;						//thread des client
-		
-		ServerSocket serverSocket = null;			//endpoint du servuer
-		InetAddress ipAddress;						//adr d'ecoute du serveur
-		
-		String hostname;							//adr d'ecoute du serveur (forme string)
-		static final String DEF_HOST="127.0.0.1";   //adr d'ecoute par defaut
-		
-		int port=10118;								//port d'ecoute
-		int nbsleep=0;								//tps d'attente
-		
-		/**
-		 * Constructeur
-		 * Cree un serveur en ecoute a l'adresse hostname avec un temps d'attente nbsleep
-		 * @param hostname : Adresse ou le serveur doit ecouter
-		 * @param nbsleep : Temps d'attente en second
-		 */
-		public ServerTCP(String hostname, int nbsleep) {
-			this.hostname=hostname;
-			this.nbsleep=nbsleep;	
-			try {
-				ipAddress= InetAddress.getByName(hostname);
-			} catch (UnknownHostException e1) {
-				System.err.println("On ne peut pas se binder sur : "+hostname+ " invalide");
-				System.exit(1);
-			}
-			try {
-				serverSocket = new ServerSocket(port,0, ipAddress);
-			} catch (IOException e) {
-				System.err.println("On ne peut pas ecouter au  port: "+port);
-				System.exit(1);
-			}
-		}
-		
-		/**
-		 * Constructeur
-		 * Cree un serveur en ecoute a l'adresse hostname sans temps d'attente
-		 * @param hostname : Adresse ou le serveur doit ecouter
-		 */
-		public ServerTCP(String hostname)  {
-			this(hostname,0);
-		}
-
-		/**
-		 * Constructeur
-		 * Cree un serveur en ecoute a l'adresse DEF_HOST et sans temps d'attente
-		 */
-		public ServerTCP()  {
-			this(DEF_HOST,0);
-		}
-		
-		
-		/**
-		 * Methode servant a rendre le serveur en mode actif
-		 * Ecoute infiniment en attente d'une connection puis transmet a HandlerTCP
-		 */
-		@Override
-		public void run() {
-				System.out.println("Le serveur est en marche, Attente de la connexion...");
-				while (run == true) {
-					try {
-						clientSocket = serverSocket.accept();
-					} catch (IOException e) {
-						System.err.println("Accept a echoue.");
-						continue;
-					}
-					
-					
-					try {
-						clientjob = new HandlerTCP(clientSocket,nbsleep,port,hostname);
-						clientjob.start();
-					} catch (IOException e) {
-						// TODO Auto-generated catch block
-						e.printStackTrace();
-					}
-					if(Thread.interrupted())
-						run = false;
-				}
-		}
-		
-		/**
-		 * Fonction pour arreter l'ecoute infinie du serveur.
-		 * Marque la fin de la boucle 
-		 * puis force une exeption pour quitter les IO blocants.
-		 */
-		public void stoping() {
-			run = false;
-			try {
-			//	clientjob.stoping();
-				serverSocket.close();
-			} catch (IOException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			}
-		}
-	}
-	//end ServerTCP class
-	
-	/**
-	 * Class de traitement du serveur pour chaque connection client
-	 * (Ici un simple wait + echo)
-	 * @author lighta
-	 */
-	public class HandlerTCP extends Thread {
-		Socket clientSocket = null;			//socket de connection au client
-		int second=0;						//nb de seconded'attente avant reponse
-		int serv_port=0;					//port du serveur
-		String serv_host;					//adr du serveur
-
-		/**
-		 * Constructeur
-		 * Creer un objet de reponse pour le serveur qui sera envoyer au client du socket
-		 * @param clientSocket : Socket du client (pour repondre)
-		 * @param second : Temps d'attente avant reponse
-		 * @param serv_port : Port du serveur lie
-		 * @param serv_host : Adresse du serveur lie
-		 * @throws IOException
-		 */
-		public HandlerTCP(Socket clientSocket, int second, int serv_port, String serv_host) throws IOException {
-			this.clientSocket = clientSocket;
-			this.second = second;
-			this.serv_port = serv_port;
-			this.serv_host = "";
-		}	
-		
-		/**
-		 * Fonction de reponse, traitement propre sans notions des containers
-		 * @throws IOException
-		 * @throws InterruptedException
-		 */
-		private void reply() throws IOException, InterruptedException {
-			PrintWriter out;
-			out = new PrintWriter(clientSocket.getOutputStream(), true);
-			BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
-
-			String inputLine = null;
-			while (true) {
-				while(inputLine == null || inputLine.isEmpty()) //attente blocante pour fichier
-					inputLine = in.readLine();
-				
+			String inputLine = null;
+			while (true) {
+				while(inputLine == null || inputLine.isEmpty()) //attente blocante pour fichier
+					inputLine = in.readLine();
+				
 				//simulation long traitement
-				System.out.println("Serveur waiting for : " + second);
-				Thread.sleep(1000*second);
-				System.out.println("Sleep ended");
-				//end simulation
-			
-				//echo + bye
-				if (inputLine.equalsIgnoreCase("BYE")){
-					out.println(inputLine+" : Connection closed");
-					System.out.println("Serveur: Connection client closed" );
-					break;
-				}
-				inputLine = inputLine.toUpperCase();
-				//echo standard
-				System.out.println("Serveur: " + inputLine);
-				out.println(inputLine);
-				
-				inputLine = null; //raz pour fichier
-			}	
-			out.close();
-			in.close();
-		}
-
-		/**
-		 * Debut de traitement de requete.
-		 * Container pour gestions des sockets et autres IO
-		 */
-		@Override
-		public void run() {
-			System.out.println("connexion reussie");
-			System.out.println("Attente de l'entree.....");
-			try {
-				reply();
-			} catch (IOException e) {
-				System.err.println("Reply failed");
-				// e.printStackTrace();
-			} catch (InterruptedException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			}
-			try {
-				clientSocket.close();
-			} catch (IOException e) {
-				System.err.println("Closed failed");
-				// e.printStackTrace();
-			}
-		}
-	}
-	//end HandlerTCP class
-
-	/**
-	 * Fonction servant a definir les stream de defaut pour les entree et sortie standard
-	 * @param args[0] programm inputStream (null for standard input)
-	 * @param args[1] programm outputStream (null for standard output)
-	 * @param args[2] programm errOutputStream (null for standard output)
-	 * @throws IOException 
-	 * 
-	 * @throws IOException
-	 */
-	private static void initIO(String[] streams) throws IOException
-	{
-		BufferedInputStream input;
-		PrintStream output;
-		PrintStream errOutput;
-		
-		//set programm inputStream
-		if (streams.length >= 1 && streams[0] != null){
-			FileInputStream fis = new FileInputStream (streams [0]);
-			input = new BufferedInputStream(fis);
-		}
-		else{
-			input = new BufferedInputStream(System.in);
-		}
-		
-		
-		//set programm outputStream
-		if (streams.length >= 2 && streams[1] != null){
-			FileOutputStream fos = new FileOutputStream (streams [1]);
-			output = new PrintStream(fos);
-		}
-		else{
-			output = new PrintStream(System.out);
-		}
-		
-		//set programm outputStream
-		if (streams.length >= 3 && streams[2] != null){
-			FileOutputStream fos = new FileOutputStream (streams [2]);
-			errOutput = new PrintStream(fos);
-		}
-		else{
-			errOutput = new PrintStream(System.err);
-		}
-		
-		System.setIn(input);
-		System.setOut(output);
-		System.setErr(errOutput);
-		
-	}
+				System.out.println("Serveur waiting for : " + second);
+				Thread.sleep(1000*second);
+				System.out.println("Sleep ended");
+				//end simulation
+			
+				//echo + bye
+				if (inputLine.equalsIgnoreCase("BYE")){
+					out.println(inputLine+" : Connection closed");
+					System.out.println("Serveur: Connection client closed" );
+					break;
+				}
+				inputLine = inputLine.toUpperCase();
+				//echo standard
+				System.out.println("Serveur: " + inputLine);
+				out.println(inputLine);
+				
+				inputLine = null; //raz pour fichier
+			}	
+			out.close();
+			in.close();
+		}
+
+		/**
+		 * Debut de traitement de requete.
+		 * Container pour gestions des sockets et autres IO
+		 */
+		@Override
+		public void run() {
+			System.out.println("connexion reussie");
+			System.out.println("Attente de l'entree.....");
+			try {
+				reply();
+			} catch (IOException e) {
+				System.err.println("Reply failed");
+				// e.printStackTrace();
+			} catch (InterruptedException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+			try {
+				clientSocket.close();
+			} catch (IOException e) {
+				System.err.println("Closed failed");
+				// e.printStackTrace();
+			}
+		}
+	}
+	//end HandlerTCP class
+
+	/**
+	 * Fonction servant a definir les stream de defaut pour les entree et sortie standard
+	 * @param args[0] programm inputStream (null for standard input)
+	 * @param args[1] programm outputStream (null for standard output)
+	 * @param args[2] programm errOutputStream (null for standard output)
+	 * @throws IOException 
+	 * 
+	 * @throws IOException
+	 */
+	private static void initIO(String[] streams) throws IOException
+	{
+		BufferedInputStream input;
+		PrintStream output;
+		PrintStream errOutput;
+		
+		//set programm inputStream
+		if (streams.length >= 1 && streams[0] != null){
+			FileInputStream fis = new FileInputStream (streams [0]);
+			input = new BufferedInputStream(fis);
+		}
+		else{
+			input = new BufferedInputStream(System.in);
+		}
+		
+		
+		//set programm outputStream
+		if (streams.length >= 2 && streams[1] != null){
+			FileOutputStream fos = new FileOutputStream (streams [1]);
+			output = new PrintStream(fos);
+		}
+		else{
+			output = new PrintStream(System.out);
+		}
+		
+		//set programm outputStream
+		if (streams.length >= 3 && streams[2] != null){
+			FileOutputStream fos = new FileOutputStream (streams [2]);
+			errOutput = new PrintStream(fos);
+		}
+		else{
+			errOutput = new PrintStream(System.err);
+		}
+		
+		System.setIn(input);
+		System.setOut(output);
+		System.setErr(errOutput);
+		
+	}
 	
-	public static void main(String[] args) throws IOException {				
-		initIO(args);
+	public static void main(String[] args) throws IOException {				
+		initIO(args);
 		new Server();
-		
-	}
+		
+	}
 }
