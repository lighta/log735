diff -ur ../src/main/java/ens/etsmtl/ca/q3/Client.java ../src/main/java/ens/etsmtl/ca/q5/Client.java
--- ../src/main/java/ens/etsmtl/ca/q3/Client.java	2015-05-16 10:13:12.645946229 -0400
+++ ../src/main/java/ens/etsmtl/ca/q5/Client.java	2015-05-16 10:21:02.000000000 -0400
@@ -15,7 +15,7 @@
 Client avance, switchant de serveur apres un certain Timeout
 ******************************************************/
 
-package ens.etsmtl.ca.q3;
+package ens.etsmtl.ca.q5;
 import java.io.*;
 import java.net.*;
 import java.util.concurrent.Callable;
@@ -26,7 +26,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import ens.etsmtl.ca.q3.ServDico.ServerDef;
+import ens.etsmtl.ca.q5.ServDico.ServerDef;
 
 
 
diff -ur ../src/main/java/ens/etsmtl/ca/q3/ServDico.java ../src/main/java/ens/etsmtl/ca/q5/ServDico.java
--- ../src/main/java/ens/etsmtl/ca/q3/ServDico.java	2015-05-16 10:18:09.211581981 -0400
+++ ../src/main/java/ens/etsmtl/ca/q5/ServDico.java	2015-05-16 10:18:27.000000000 -0400
@@ -15,7 +15,7 @@
 Class servant a definir un dictionnaire de serveur joignable
 ******************************************************/
 
-package ens.etsmtl.ca.q3;
+package ens.etsmtl.ca.q5;
 import java.util.HashMap;
 import java.util.Map;
 
diff -ur ../src/main/java/ens/etsmtl/ca/q3/Server.java ../src/main/java/ens/etsmtl/ca/q5/Server.java
--- ../src/main/java/ens/etsmtl/ca/q3/Server.java	2015-05-16 09:55:58.000000000 -0400
+++ ../src/main/java/ens/etsmtl/ca/q5/Server.java	2015-05-16 10:20:26.000000000 -0400
@@ -15,7 +15,7 @@
 Server echo Multithread TCP 
 ******************************************************/
 
-package ens.etsmtl.ca.q3;
+package ens.etsmtl.ca.q5;
 import java.net.*;
 import java.io.*;
 
@@ -24,6 +24,7 @@
  * @author lighta
  */
 public class Server {
+	static int nb_req=0;	//variable pour compter le nombre de requete servit
 
 	/**
 	 * Constructor
@@ -202,13 +203,13 @@
 			PrintWriter out;
 			out = new PrintWriter(clientSocket.getOutputStream(), true);
 			BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
-
+
 			String inputLine = null;
 			while (true) {
 				while(inputLine == null || inputLine.isEmpty()) //attente blocante pour fichier
 					inputLine = in.readLine();
 				
-				//simulation long traitement
+				//simulation long traitement
 				System.out.println("Serveur waiting for : " + second);
 				Thread.sleep(1000*second);
 				System.out.println("Sleep ended");
@@ -220,7 +221,9 @@
 					System.out.println("Serveur: Connection client closed" );
 					break;
 				}
-				inputLine = inputLine.toUpperCase();
+
+				nb_req++;
+				inputLine = "nb_req:"+nb_req+" "+inputLine.toUpperCase();
 				//echo standard
 				System.out.println("Serveur: " + inputLine);
 				out.println(inputLine);
@@ -306,10 +309,10 @@
 		System.setErr(errOutput);
 		
 	}
-	
+	
 	public static void main(String[] args) throws IOException {				
 		initIO(args);
-		new Server();
+		new Server();
 		
 	}
 }
